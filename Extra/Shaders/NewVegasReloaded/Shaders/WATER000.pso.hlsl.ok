//
// Generated by Microsoft (R) HLSL Shader Compiler 9.23.949.2378
//
// Parameters:

float4 EyePos : register(c1);
float4 ShallowColor : register(c2);
float4 DeepColor : register(c3);
float4 ReflectionColor : register(c4);
float4 FresnelRI : register(c5);
float4 VarAmounts : register(c8);
float4 FogParam : register(c9);
float4 FogColor : register(c10);
float2 DepthFalloff : register(c11);
float4 SunDir : register(c12);
float4 SunColor : register(c13);
float4 TESR_WaveParams : register(c14);

sampler2D ReflectionMap : register(s0);
sampler2D RefractionMap : register(s1);
sampler2D NoiseMap : register(s2);
sampler2D DepthMap : register(s4);

// Registers:
//
//   Name            Reg   Size
//   --------------- ----- ----
//   EyePos          const_1       1
//   ShallowColor    const_2       1
//   DeepColor       const_3       1
//   ReflectionColor const_4       1
//   FresnelRI       const_5       1
//   VarAmounts      const_8       1
//   FogParam        const_9       1
//   FogColor        const_10      1
//   DepthFalloff    const_11      1
//   SunDir          const_12      1
//   SunColor        const_13      1
//   ReflectionMap   texture_0       1
//   RefractionMap   texture_1       1
//   NoiseMap        texture_2       1
//   DepthMap        texture_4       1
//


// Structures:

struct VS_INPUT {
    float4 LTEXCOORD_0 : TEXCOORD0_centroid;
    float4 LTEXCOORD_1 : TEXCOORD1_centroid;
    float4 LTEXCOORD_2 : TEXCOORD2_centroid;
    float4 LTEXCOORD_3 : TEXCOORD3_centroid;
    float4 LTEXCOORD_4 : TEXCOORD4_centroid;
    float4 LTEXCOORD_5 : TEXCOORD5_centroid;
    float4 LTEXCOORD_6 : TEXCOORD6;
    float2 LTEXCOORD_7 : TEXCOORD7;
};

struct VS_OUTPUT {
    float4 color_0 : COLOR0;
};

// Code:

VS_OUTPUT main(VS_INPUT IN) {
    VS_OUTPUT OUT;

#define	expand(v)		(((v) - 0.5) / 0.5)
#define	compress(v)		(((v) * 0.5) + 0.5)
#define	shade(n, l)		max(dot(n, l), 0)
#define	shades(n, l)	saturate(dot(n, l))
#define	weight(v)		dot(v, 1)
#define	sqr(v)			((v) * (v))

    const float4 const_14 = {-0.569999993, 0.819999993, 0, 100};
    const float4 const_6 = {-4, 4, 1, -9.99999975e-005};
    const int4 const_7 = {0, 2, -1, 1};

    float3 q10;
    float1 q133;
    float3 q21;
    float3 q23;
    float3 q39;
    float1 q4;
    float1 q47;
    float1 q6;
    float1 q60;
    float1 q8;
    float1 q9;
    float4 r0;
    float4 r1;
    float3 r2;
    float4 r3;
    float2 r4;
    float3 r5;
    float4 r6;
    float3 t3;
	float choppiness = TESR_WaveParams.x;
	float waveWidth = TESR_WaveParams.y;
	float reflectivity = TESR_WaveParams.w;
	
    r3.xyzw = tex2D(NoiseMap, IN.LTEXCOORD_7.xy * waveWidth);
    r1.w = dot(IN.LTEXCOORD_5.xyzw, IN.LTEXCOORD_1.xyzw);
    r1.y = r1.w - dot(IN.LTEXCOORD_3.xyzw, IN.LTEXCOORD_1.xyzw);
    r1.z = dot(IN.LTEXCOORD_4.xyzw, IN.LTEXCOORD_1.xyzw);
    r1.x = dot(IN.LTEXCOORD_2.xyzw, IN.LTEXCOORD_1.xyzw);
    r0.xyzw = tex2Dproj(DepthMap, r1.xyzw);
    q133.x = saturate((r0.y - DepthFalloff.x) / (DepthFalloff.y - DepthFalloff.x));
    r1.xyz = const_6.xyz;
    r2.xyz = EyePos.xyz - IN.LTEXCOORD_0.xyz;
    r4.xy = saturate(lerp(r0.xy * 2, 1, 1 - saturate(1 - ((length(r2.xy) - 4096) * 0.000244140625))));
    r1.w = length(r2.xyz);
    q60.x = (r0.y * q133.x) * ((saturate(length(r2.xy) * 0.0002) * (r1.x + VarAmounts.w)) + 4);
    r1.x = r4.y + r1.w;
    r1.xw = saturate((FogParam.x - r1.xw) / FogParam.y);
    q47.x = pow(abs(1 - r1.x), FresnelRI.y);
    r3.xyz = (q133.x * expand(r3.xyz) * choppiness) + const_7.xxw;
    r3.xy = saturate(1 - ((length(r2.xy) - 4096) * 0.000244140625)) * r3.xy;
    r5.xyz = normalize(r3.xyz);
    r1.x = shades(normalize(r1.zyz * SunDir.xyz), r5.xyz);
    q9.x = pow(abs(shades(reflect(-normalize(r2.xyz), r5.xyz), SunDir.xyz)), VarAmounts.x);
    q8.x = pow(abs(saturate(dot(r5.xz, const_14.xy))), 100);
    r3.zw = (IN.LTEXCOORD_1.z * const_7.wx) + const_7.xw;
    r3.xy = ((q60.x * r5.xy) / IN.LTEXCOORD_0.w) + IN.LTEXCOORD_1.xy;
    r6.xyzw = mul(float4x4(IN.LTEXCOORD_2.xyzw, IN.LTEXCOORD_3.xyzw, IN.LTEXCOORD_4.xyzw, IN.LTEXCOORD_5.xyzw), r3.xyzw);
    t3.xyz = tex2Dproj(ReflectionMap, r6.xyzw).xyz;
    r3.xzw = r6.xzw;
    r3.y = r3.w - r6.y;
    r3.xyzw = tex2Dproj(RefractionMap, r3.xyzw);
    q6.x = 1 - shades(normalize(r2.xyz), r5.xyz);
    q21.xyz = (r3.xyz - (q47.x * FogColor.rgb)) / (1 - (q47.x - 9.99999975e-005));
    q4.x = 1 - saturate((FogParam.z - (r4.x * FogParam.z)) / FogParam.w);
	r6.xyz = (r4.y * (DeepColor.xyz - ShallowColor.xyz)) + ShallowColor.xyz;
	r0.xyw = (VarAmounts.y * (t3.xyz - ReflectionColor.rgb)) + ReflectionColor.xyz;
	r0.z = q133.x * (q4.x * FogColor.a);
	q21.xyz = (r4.y * (r6.xyz - q21.xyz)) + q21.xyz;
	q39.xyz = (r0.z * (r6.xyz - q21.xyz)) + q21.xyz;
	q23.xyz = ((r4.y * 0.5 * lerp(FresnelRI.x, 1, q6.x * sqr(sqr(q6.x)))) * ((r0.xyw * reflectivity * FresnelRI.w) - q39.xyz)) + q39.xyz;
    q10.xyz = (SunDir.w * ((q8.x + q9.x) * SunColor.rgb)) + q23.xyz;
    OUT.color_0.a = 1;
    OUT.color_0.rgb = (pow(abs(1 - r1.w), FresnelRI.y) * (FogColor.rgb - q10.xyz)) + q10.xyz;
    return OUT;
	
};